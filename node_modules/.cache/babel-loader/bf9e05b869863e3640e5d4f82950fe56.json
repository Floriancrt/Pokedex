{"ast":null,"code":"var _jsxFileName = \"/Users/florian/Documents/ReactJs/app-pokedex/src/components/PokemonSearch.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\"; // Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n\nclass PokemonSearch extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      users: [],\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    var url = \"https://pokeapi.co/api/v2/pokemon?offset=50&limit=50\";\n    this.setState({\n      isLoading: true\n    });\n    axios.get(url).then(response => response.data.results.map((user, n, url, p) => (n = \"\".concat(user.name), user = \"\".concat(user.url), url = user.split(\"/\")[6], p = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\".concat(url, \".png\"), {\n      name: n,\n      username: user,\n      pics: p\n    }))).then(users => {\n      this.setState({\n        users,\n        isLoading: false\n      });\n    }).catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Accounts\"), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, users.map(user => {\n      const name = user.name,\n            pics = user.pics;\n      return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/{name}\",\n        children: React.createElement(Child, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }));\n    }), React.createElement(Route, {\n      path: \"/:id\",\n      children: React.createElement(Child, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let _useParams = useParams(),\n      id = _useParams.id;\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"ID: \", id));\n}\n\n{\n  users.map(user => {\n    const name = user.name,\n          pics = user.pics;\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(PokeCard, {\n      img: pics,\n      title: name,\n      key: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  });\n}","map":{"version":3,"sources":["/Users/florian/Documents/ReactJs/app-pokedex/src/components/PokemonSearch.js"],"names":["React","axios","BrowserRouter","Router","Switch","Route","Link","useParams","PokemonSearch","Component","state","isLoading","users","error","componentDidMount","url","setState","get","then","response","data","results","map","user","n","p","name","split","username","pics","catch","render","Child","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\n// Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n\nclass PokemonSearch extends React.Component {\n  state = {\n    isLoading: false,\n    users: [],\n    error: null\n  };\n\n  componentDidMount() {\n    var url = \"https://pokeapi.co/api/v2/pokemon?offset=50&limit=50\";\n\n    this.setState({ isLoading: true });\n\n    axios\n      .get(url)\n      .then(response =>\n        response.data.results.map(\n          (user, n, url, p) => (\n            (n = `${user.name}`),\n            (user = `${user.url}`),\n            (url = user.split(\"/\")[6]),\n            (p = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${url}.png`),\n            {\n              name: n,\n              username: user,\n              pics: p\n            }\n          )\n        )\n      )\n\n      .then(users => {\n        this.setState({\n          users,\n          isLoading: false\n        });\n      })\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <h2>Accounts</h2>\n\n          <Switch>\n            {users.map(user => {\n              const { name, pics } = user;\n\n              return (\n                <div className=\"row\">\n                  <Route path=\"/{name}\" children={<Child />} />\n                </div>\n              );\n            })}\n\n            <Route path=\"/:id\" children={<Child />} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let { id } = useParams();\n\n  return (\n    <div>\n      <h3>ID: {id}</h3>\n    </div>\n  );\n}\n\n{\n  users.map(user => {\n    const { name, pics } = user;\n\n    return (\n      <div className=\"row\">\n        <PokeCard img={pics} title={name} key={name} />\n      </div>\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}