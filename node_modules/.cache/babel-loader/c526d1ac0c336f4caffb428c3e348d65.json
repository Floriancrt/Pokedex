{"ast":null,"code":"var _jsxFileName = \"/Users/florian/Documents/ReactJs/app-pokedex/src/components/PokemonSearch.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\"; // Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n\nclass PokeSearch extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      users: [],\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    var url = \"https://pokeapi.co/api/v2/pokemon?offset=50&limit=50\";\n    this.setState({\n      isLoading: true\n    });\n    axios.get(url).then(response => response.data.results.map((user, n, url, p) => (n = \"\".concat(user.name), user = \"\".concat(user.url), url = user.split(\"/\")[6], p = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\".concat(url, \".png\"), {\n      name: n,\n      username: user,\n      pics: p\n    }))).then(users => {\n      this.setState({\n        users,\n        isLoading: false\n      });\n    }).catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  render() {\n    let _useParams = useParams(),\n        id = _useParams.id;\n\n    console.log(id);\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Photos\"), loading ? \"Loading...\" : React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, data.map(({\n      id,\n      title,\n      url\n    }) => React.createElement(\"li\", {\n      key: \"photo-\".concat(id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: title,\n      src: url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let _useParams2 = useParams(),\n      name = _useParams2.name;\n\n  try {\n    const res = fetch('https://baconipsum.com/api/?type=meat-and-filler');\n    const data = res.json();\n    this.setState({\n      data,\n      isLoading: false\n    });\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"ID: \", name));\n}","map":{"version":3,"sources":["/Users/florian/Documents/ReactJs/app-pokedex/src/components/PokemonSearch.js"],"names":["React","axios","BrowserRouter","Router","Switch","Route","Link","useParams","PokeSearch","Component","state","isLoading","users","error","componentDidMount","url","setState","get","then","response","data","results","map","user","n","p","name","split","username","pics","catch","render","id","console","log","loading","title","Child","res","fetch","json","err"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\n\n// Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n\n\n\nclass PokeSearch extends React.Component {\n\n\n\n\n        state = {\n    isLoading: false,\n    users: [],\n    error: null\n  };\n\n  componentDidMount() {\n    var url = \"https://pokeapi.co/api/v2/pokemon?offset=50&limit=50\";\n\n    this.setState({ isLoading: true});\n\n    axios\n      .get(url)\n      .then(response =>\n        response.data.results.map(\n          (user, n, url, p) => (\n             n = `${user.name}`,\n             user = `${user.url}`,\n             url = user.split(\"/\")[6],\n             p = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${url}.png`,\n            {\n              name: n,\n              username: user,\n              pics: p\n            }\n          )\n        )\n      )\n\n      .then(users => {\n        this.setState({\n          users,\n          isLoading: false\n        });\n      })\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n       \n\n        render() {\n\n            let { id } = useParams();\n            console.log(id)\n        return (\n          <>\n            <h1>Photos</h1>\n            {loading ? (\n              \"Loading...\"\n            ) : (\n              <ul>\n                {data.map(({ id, title, url }) => (\n                  <li key={`photo-${id}`}>\n                    <img alt={title} src={url} />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </>\n        );\n      }\n}\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let { name } = useParams();\n\n    try {\n\n                \n        const res = fetch('https://baconipsum.com/api/?type=meat-and-filler');\n        const data = res.json();\n        this.setState({ data, isLoading: false });\n        \n        \n    }\n    catch(err)\n    {\n        console.log(err);\n        throw err;\n    }\n\n\n  return (\n    <div>\n      <h3>ID: {name}</h3>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}