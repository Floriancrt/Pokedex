{"ast":null,"code":"var _jsxFileName = \"/Users/florian/Documents/ReactJs/app-pokedex/src/components/PokemonSearch.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\"; // Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n\nexport default function PokemonSearch() {\n  return React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Accounts\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/netflix\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Netflix\")), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/zillow-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Zillow Group\")), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/yahoo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Yahoo\")), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/modus-create\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Modus Create\"))), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/:id\",\n    children: React.createElement(Child, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }))));\n}\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let _useParams = useParams(),\n      id = _useParams.id;\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"ID: \", id));\n}","map":{"version":3,"sources":["/Users/florian/Documents/ReactJs/app-pokedex/src/components/PokemonSearch.js"],"names":["React","BrowserRouter","Router","Switch","Route","Link","useParams","PokemonSearch","Child","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,EAKEC,SALF,QAMO,kBANP,C,CAQA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CAPF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAVF,CAHF,EAkBE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAlBF,CADF,CADF;AA0BD;;AAED,SAASC,KAAT,GAAiB;AACf;AACA;AAFe,mBAGFF,SAAS,EAHP;AAAA,MAGTG,EAHS,cAGTA,EAHS;;AAKf,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAASA,EAAT,CADF,CADF;AAKD","sourcesContent":["import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\n// Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n\nexport default function PokemonSearch() {\n  return (\n    <Router>\n      <div>\n        <h2>Accounts</h2>\n\n        <ul>\n          <li>\n            <Link to=\"/netflix\">Netflix</Link>\n          </li>\n          <li>\n            <Link to=\"/zillow-group\">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to=\"/yahoo\">Yahoo</Link>\n          </li>\n          <li>\n            <Link to=\"/modus-create\">Modus Create</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/:id\" children={<Child />} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let { id } = useParams();\n\n  return (\n    <div>\n      <h3>ID: {id}</h3>\n    </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}